// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: comments.sql

package dbs

import (
	"context"
	"database/sql"
	"time"
)

const commentUpdate = `-- name: CommentUpdate :exec
UPDATE comments
SET content    = $1,
    updated_at = $2,
    updated_by = $3
WHERE comment_id = $4
`

type CommentUpdateParams struct {
	Content   string
	UpdatedAt time.Time
	UpdatedBy int64
	CommentID int64
}

func (q *Queries) CommentUpdate(ctx context.Context, arg CommentUpdateParams) error {
	_, err := q.exec(ctx, q.commentUpdateStmt, commentUpdate,
		arg.Content,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.CommentID,
	)
	return err
}

const commentsByID = `-- name: CommentsByID :one
SELECT c.comment_id,
       c.parent_comment_id,
       c.content,
       c.created_by,
       c.created_at,
       u.username AS author_username
FROM comments c
         INNER JOIN users u ON c.created_by = u.user_id
WHERE c.comment_id = $1
`

type CommentsByIDRow struct {
	CommentID       int64
	ParentCommentID sql.NullInt64
	Content         string
	CreatedBy       int64
	CreatedAt       time.Time
	AuthorUsername  string
}

func (q *Queries) CommentsByID(ctx context.Context, commentID int64) (CommentsByIDRow, error) {
	row := q.queryRow(ctx, q.commentsByIDStmt, commentsByID, commentID)
	var i CommentsByIDRow
	err := row.Scan(
		&i.CommentID,
		&i.ParentCommentID,
		&i.Content,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.AuthorUsername,
	)
	return i, err
}

const commentsByTopic = `-- name: CommentsByTopic :many
SELECT c.comment_id,
       c.parent_comment_id,
       c.content,
       c.created_by,
       c.created_at,
       u.username AS author_username
FROM comments c
         INNER JOIN users u ON c.created_by = u.user_id
WHERE c.topic_id = $1::BIGINT
OFFSET $2 LIMIT $3
`

type CommentsByTopicParams struct {
	TopicID int64
	Offset  int32
	Limit   int32
}

type CommentsByTopicRow struct {
	CommentID       int64
	ParentCommentID sql.NullInt64
	Content         string
	CreatedBy       int64
	CreatedAt       time.Time
	AuthorUsername  string
}

func (q *Queries) CommentsByTopic(ctx context.Context, arg CommentsByTopicParams) ([]CommentsByTopicRow, error) {
	rows, err := q.query(ctx, q.commentsByTopicStmt, commentsByTopic, arg.TopicID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CommentsByTopicRow
	for rows.Next() {
		var i CommentsByTopicRow
		if err := rows.Scan(
			&i.CommentID,
			&i.ParentCommentID,
			&i.Content,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.AuthorUsername,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const commentsNew = `-- name: CommentsNew :one
INSERT INTO comments (parent_comment_id, topic_id, content, created_at, created_by, updated_at, updated_by)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING comment_id
`

type CommentsNewParams struct {
	ParentCommentID sql.NullInt64
	TopicID         int64
	Content         string
	CreatedAt       time.Time
	CreatedBy       int64
	UpdatedAt       time.Time
	UpdatedBy       int64
}

func (q *Queries) CommentsNew(ctx context.Context, arg CommentsNewParams) (int64, error) {
	row := q.queryRow(ctx, q.commentsNewStmt, commentsNew,
		arg.ParentCommentID,
		arg.TopicID,
		arg.Content,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
	var comment_id int64
	err := row.Scan(&comment_id)
	return comment_id, err
}
